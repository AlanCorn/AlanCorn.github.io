import{_ as a,p as t,q as p,s as n,R as s,t as o,Y as l,n as c}from"./framework-e1bed10d.js";const r={},i=l(`<h2 id="typescript中的type" tabindex="-1"><a class="header-anchor" href="#typescript中的type" aria-hidden="true">#</a> TypeScript中的Type</h2><p>TypeScript是JavaScript的超集，它再JavaScript上增加了各种类型检查，并拓展了语法，支持ES6的新特性</p><h3 id="定义一个type类型" tabindex="-1"><a class="header-anchor" href="#定义一个type类型" aria-hidden="true">#</a> 定义一个Type类型</h3><p>定义Type类型相当于为JavaScript中的各种类型取别名，根据不同情况，会产生以下几种不同的Type类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Digital</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 基本类型</span>
<span class="token keyword">type</span> <span class="token class-name">People</span> <span class="token operator">=</span> <span class="token punctuation">{</span>         <span class="token comment">// 对象类型</span>
    name <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    sex <span class="token operator">:</span> <span class="token string">&quot;man&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;female&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;other&quot;</span>  <span class="token comment">// 联合类型，&quot;或&quot;关系</span>
<span class="token punctuation">}</span> 
<span class="token keyword">type</span> <span class="token class-name">getName</span> <span class="token operator">=</span> <span class="token punctuation">(</span>human<span class="token operator">:</span>People<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token comment">// 函数</span>
<span class="token keyword">type</span> <span class="token class-name">data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">]</span>             <span class="token comment">// 元组</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> Clickable <span class="token operator">&amp;</span> Focusable　　 <span class="token comment">// 交叉类型 ，&quot;和&quot;关系</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12个常用的typescript工具类" tabindex="-1"><a class="header-anchor" href="#_12个常用的typescript工具类" aria-hidden="true">#</a> 12个常用的TypeScript工具类</h2>`,6),u={href:"https://www.bilibili.com/video/BV1gL411Y7Mf/?spm_id_from=333.1007.top_right_bar_window_view_later.content.click",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),k=n("strong",null,"可选属性",-1),y=n("strong",null,"必选属性",-1),m=n("strong",null,"只读属性",-1),_=n("strong",null,"选择",-1),h=n("strong",null,"删除",-1),T=n("strong",null,"排除",-1),b=n("strong",null,"提取",-1);function v(g,f){const e=c("ExternalLinkIcon");return t(),p("div",null,[i,n("blockquote",null,[n("p",null,[s("reference:"),n("a",u,[s("bilibili"),o(e)]),d,s(" 工具类 | 描述 | 发布版本 ----|----|---- Await<Type> | 获取Promise中的结果类型 | 4.5 Partial<Type> | 将Type中的所有属性设置为"),k,s("，返回一个新的类型 | 2.1 Require<Type> | 将Type中的所有属性设置为"),y,s("，返回一个新的类型 | 2.8 ReadOnly<Type> | 将Type中的所有属性设置为"),m,s("，返回一个新的类型 | 2.1 Record<Keys, Type> | 新建一个由Keys指定的属性和Type指定的值组成的对象类型 |2.1 Pick<Type, Keys> | 从Type中"),_,s("一个或多个属性，并返回一个新的类型 |2.1 Omit<Type, Keys> | 从Type中"),h,s("一个或多个属性，并返回一个新的类型 |3.5 Exclude<UnionType, ExcludedMembers> | 从UnionType中"),T,s("ExcludedMembers中的所有类型，并返回一个新的类型 | 2.8 Extract<UnionType, ExtractedMembers> | 从UnionType中"),b,s("ExcludedMembers中的所有类型，并返回一个新的类型 | 2.8 NonNullable<Type> | 从Type中排除null和underfined类型，并返回一个新的类型 | 2.8 Parameters<Type> | 获取函数类型Type的参数类型，以元组类型返回 | 3.1 ReturnType<Type> | 获取函数类型Type的返回值类型 | 2.8")])])])}const q=a(r,[["render",v],["__file","UsefullTypeInTS.html.vue"]]);export{q as default};
